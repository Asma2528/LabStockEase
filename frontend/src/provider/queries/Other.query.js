import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const OtherApi = createApi({
    reducerPath: 'OtherApi',
    baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BACKEND_URL }),
    tagTypes: ['Others'],
    endpoints: (builder) => ({
        // Query to get all others with optional filters
        getAllOthers: builder.query({
            query: (filters) => ({
                url: '/other/all',
                method: 'GET',
                params: filters,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Others'],
        }),

        // Query to get a other by ID
        getOtherById: builder.query({
            query: (id) => ({
                url: `/other/${id}`,
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Others'],
        }),

        // Mutation to add a new other
        addOther: builder.mutation({
            query: (otherData) => ({
                url: '/other/create',
                method: 'POST',
                body: otherData,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Others'],
        }),

        // Mutation to update a other
        updateOther: builder.mutation({
            query: ({ id, ...updateData }) => ({
                url: `/other/update/${id}`,
                method: 'PATCH',
                body: JSON.stringify(updateData),
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Others'],
        }),

        // Mutation to delete a other
        deleteOther: builder.mutation({
            query: (id) => ({
                url: `/other/delete/${id}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            invalidatesTags: ['Others'],
        }),
    }),
});

// Exporting the hooks generated by RTK Query
export const {
    useGetAllOthersQuery,
    useGetOtherByIdQuery,
    useAddOtherMutation,
    useUpdateOtherMutation,
    useDeleteOtherMutation,
} = OtherApi;
