import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const ProjectApi = createApi({
    reducerPath: 'ProjectApi',
    baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BACKEND_URL }),
    tagTypes: ['Projects'],
    endpoints: (builder) => ({
        // Query to get all projects with optional filters
        getAllProjects: builder.query({
            query: (filters) => ({
                url: '/project/all',
                method: 'GET',
                params: filters,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Projects'],
        }),

        // Query to get a project by ID
        getProjectById: builder.query({
            query: (id) => ({
                url: `/project/${id}`,
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Projects'],
        }),

        // Mutation to add a new project
        addProject: builder.mutation({
            query: (projectData) => ({
                url: '/project/create',
                method: 'POST',
                body: projectData,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Projects'],
        }),

        // Mutation to update a project
        updateProject: builder.mutation({
            query: ({ id, ...updateData }) => ({
                url: `/project/update/${id}`,
                method: 'PATCH',
                body: JSON.stringify(updateData),
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Projects'],
        }),

        // Mutation to delete a project
        deleteProject: builder.mutation({
            query: (id) => ({
                url: `/project/delete/${id}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            invalidatesTags: ['Projects'],
        }),
    }),
});

// Exporting the hooks generated by RTK Query
export const {
    useGetAllProjectsQuery,
    useGetProjectByIdQuery,
    useAddProjectMutation,
    useUpdateProjectMutation,
    useDeleteProjectMutation,
} = ProjectApi;
