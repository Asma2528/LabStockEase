import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const InwardsApi = createApi({
    reducerPath: 'InwardApi',
    baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BACKEND_URL }),
    tagTypes: ['Inwards'],
    endpoints: (builder) => ({
        // Query to get all inwards with optional filters
        getAllInwards: builder.query({
            query: (filters) => ({
                url: '/inward/all',
                method: 'GET',
                params: filters,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Inwards'],
        }),

        // Query to get an inward by ID
        getInwardById: builder.query({
            query: (id) => ({
                url: `/inward/${id}`,
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Inwards'],
        }),

        // Mutation to create a new inward
        addInward: builder.mutation({
            query: (inwardData) => ({
                url: '/inward/create',
                method: 'POST',
                body: inwardData,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Inwards'],
        }),

        // Mutation to update an existing inward
        updateInward: builder.mutation({
            query: ({ id, ...updateData }) => ({
                url: `/inward/update/${id}`,
                method: 'PATCH',
                body: JSON.stringify(updateData), // Ensure body is correctly formatted as JSON
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Inwards'],
        }),

        
        // Mutation to delete an inward
        deleteInward: builder.mutation({
            query: (id) => ({
                url: `/inward/delete/${id}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            invalidatesTags: ['Inwards'],
        }),
    }),
});

// Exporting the hooks generated by RTK Query
export const {
    useGetAllInwardsQuery,
    useGetInwardByIdQuery,
    useAddInwardMutation,
    useUpdateInwardMutation,
    useDeleteInwardMutation,
} = InwardsApi;