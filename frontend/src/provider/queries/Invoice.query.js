import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const InvoiceApi = createApi({
    reducerPath: 'InvoiceApi',
    baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BACKEND_URL }),
    tagTypes: ['Invoices'],
    endpoints: (builder) => ({
        // Query to get all invoices with optional filters
        getAllInvoices: builder.query({
            query: (filters) => ({
                url: '/invoice/all',
                method: 'GET',
                params: filters,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Invoices'],
        }),

        // Query to get an invoice by ID
        getInvoiceById: builder.query({
            query: (id) => ({
                url: `/invoice/${id}`,
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Invoices'],
        }),

        // Mutation to create a new invoice
        addInvoice: builder.mutation({
            query: (invoiceData) => ({
                url: '/invoice/create',
                method: 'POST',
                body: invoiceData,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Invoices'],
        }),

        // Mutation to update an existing invoice
        updateInvoice: builder.mutation({
            query: ({ id, ...updateData }) => ({
                url: `/invoice/update/${id}`,
                method: 'PATCH',
                body: JSON.stringify(updateData), // Ensure body is correctly formatted as JSON
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Invoices'],
        }),

        
        // Mutation to approve an invoice (change status)
        approveInvoice: builder.mutation({
            query: ({ id, status,remark }) => ({
                url: `/invoice/approve/${id}`,
                method: 'PATCH',
                body: JSON.stringify({ status,remark }),
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Invoices'],
        }),

        // Mutation to delete an invoice
        deleteInvoice: builder.mutation({
            query: (id) => ({
                url: `/invoice/delete/${id}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            invalidatesTags: ['Invoices'],
        }),

    
    }),
});

// Exporting the hooks generated by RTK Query
export const {
    useGetAllInvoicesQuery,
    useGetInvoiceByIdQuery,
    useAddInvoiceMutation,
    useUpdateInvoiceMutation,
    useApproveInvoiceMutation,
    useDeleteInvoiceMutation,
} = InvoiceApi;
