import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const PracticalApi = createApi({
    reducerPath: 'PracticalApi',
    baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BACKEND_URL }),
    tagTypes: ['Practicals'],
    endpoints: (builder) => ({
        // Query to get all practicals with optional filters
        getAllPracticals: builder.query({
            query: (filters) => ({
                url: '/practical/all',
                method: 'GET',
                params: filters,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Practicals'],
        }),

        // Query to get a practical by ID
        getPracticalById: builder.query({
            query: (id) => ({
                url: `/practical/${id}`,
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Practicals'],
        }),

        // Mutation to add a new practical
        addPractical: builder.mutation({
            query: (practicalData) => ({
                url: '/practical/create',
                method: 'POST',
                body: practicalData,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Practicals'],
        }),

        // Mutation to update a practical
        updatePractical: builder.mutation({
            query: ({ id, ...updateData }) => ({
                url: `/practical/update/${id}`,
                method: 'PATCH',
                body: JSON.stringify(updateData),
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Practicals'],
        }),

        // Mutation to delete a practical
        deletePractical: builder.mutation({
            query: (id) => ({
                url: `/practical/delete/${id}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            invalidatesTags: ['Practicals'],
        }),
    }),
});

// Exporting the hooks generated by RTK Query
export const {
    useGetAllPracticalsQuery,
    useGetPracticalByIdQuery,
    useAddPracticalMutation,
    useUpdatePracticalMutation,
    useDeletePracticalMutation,
} = PracticalApi;
